print(paste('Predicted Linear Wins: ', sum(pred_home_wins_lin)))
real_home_wins = sum(ifelse(home_score > away_score, 1, 0))
print(paste('Actual Home Wins: ', real_home_wins))
output <- data.frame(ex_home_score, pred_home_wins_lin, pred_home_wins_log, diff = pred_home_wins_lin - pred_home_wins_log)
return(output)
#return(output)
}
df <- compare_records(ex_home_score, ex_away_score)
df
ex_home1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home3 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away3 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away_score <- calc_away_score(ex_away1, ex_away2, ex_away3)
ex_home_score <- calc_home_score(ex_home1, ex_home2, ex_home3)
compare_records <- function(home_score, away_score){
pred_home_wins_lin <- (home_score*beta1_lin + beta0_lin)
pred_home_wins_log <- exp(beta0_log + beta1_log*home_score)/(1+exp(beta0_log + beta1_log*home_score))
print(paste('Predicted Logistic Wins: ', sum(pred_home_wins_log)))
print(paste('Predicted Linear Wins: ', sum(pred_home_wins_lin)))
real_home_wins = sum(ifelse(home_score > away_score, 1, 0))
print(paste('Actual Home Wins: ', real_home_wins))
output <- data.frame(ex_home_score, pred_home_wins_lin, pred_home_wins_log, diff = pred_home_wins_lin - pred_home_wins_log)
return(output)
#return(output)
}
df <- compare_records(ex_home_score, ex_away_score)
ex_rolls <- 20
ex_away1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away3 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home3 <- sample(1:6, ex_rolls, replace = TRUE)
compare_records <- function(home_score, away_score){
pred_home_wins_lin <- (home_score*beta1_lin + beta0_lin)
pred_home_wins_log <- exp(beta0_log + beta1_log*home_score)/(1+exp(beta0_log + beta1_log*home_score))
print(paste('Predicted Logistic Wins: ', sum(pred_home_wins_log)))
print(paste('Predicted Linear Wins: ', sum(pred_home_wins_lin)))
real_home_wins = sum(ifelse(home_score > away_score, 1, 0))
print(paste('Actual Home Wins: ', real_home_wins))
output <- data.frame(ex_home_score, pred_home_wins_lin, pred_home_wins_log, diff = pred_home_wins_lin - pred_home_wins_log)
return(output)
#return(output)
}
df <- compare_records(ex_home_score, ex_away_score)
ex_rolls <- 20
ex_away1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away3 <- sample(1:6, ex_rolls, replace = TRUE)
ex_away_score <- calc_away_score(ex_away1, ex_away2, ex_away3)
ex_home1 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home2 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home3 <- sample(1:6, ex_rolls, replace = TRUE)
ex_home_score <- calc_home_score(ex_home1, ex_home2, ex_home3)
compare_records <- function(home_score, away_score){
pred_home_wins_lin <- (home_score*beta1_lin + beta0_lin)
pred_home_wins_log <- exp(beta0_log + beta1_log*home_score)/(1+exp(beta0_log + beta1_log*home_score))
print(paste('Predicted Logistic Wins: ', sum(pred_home_wins_log)))
print(paste('Predicted Linear Wins: ', sum(pred_home_wins_lin)))
real_home_wins = sum(ifelse(home_score > away_score, 1, 0))
print(paste('Actual Home Wins: ', real_home_wins))
output <- data.frame(ex_home_score, pred_home_wins_lin, pred_home_wins_log, diff = pred_home_wins_lin - pred_home_wins_log)
return(output)
#return(output)
}
df <- compare_records(ex_home_score, ex_away_score)
df2 <- compare_records(ex_home_score/(3), ex_away_score)
df3 <- compare_records(ex_home_score*(3), ex_away_score)
atlas_conn <- rvdata::getAtlasDatabaseConnection(company = 'dsc')
query1 <- 'select c.calldate,
count(c.callid) as calls
from ODS.frontier.calls c
left join ETL.ETL_Common.Dates d on d.isodate = c.calldate
where c.calldate > getdate() - 1000
and d.dowcaption not in  (\'Sunday\', \'Saturday\')
group by c.calldate'
raw_data <- rvdata::pullDbData(queryString = query1, dbType = 'MSSQL', conn = atlas_conn)
call_data <- raw_data %>%
mutate(calldate = as.Date(calldate))
call_data %>%
ggplot(aes(x = calldate, y = calls)) +
geom_point() +
scale_x_date(date_labels="%b %y",date_breaks  ="4 month")
pois_mdl <- glm(calls ~ calldate, family = "poisson", data = call_data)
pois_beta0 <- pois_mdl[[1]][1]
pois_beta1 <- pois_mdl[[1]][2]
lin_mdl <- lm(calls ~ calldate, data = call_data)
lin_beta0 <- lin_mdl[[1]][1]
lin_beta1 <- lin_mdl[[1]][2]
call_data <-
call_data %>%
mutate(JDate = julian.Date(calldate)) %>%
mutate(pois_pred = exp(pois_beta0 + JDate*pois_beta1)) %>%
mutate(lin_pred = lin_beta0 + JDate*lin_beta1)
call_data %>%
ggplot(aes(x = calldate, y = calls)) +
geom_point() +
scale_x_date(date_labels="%b %y",date_breaks  ="4 month") +
#geom_line(aes(y = pois_mdl$fitted.values), color = "cyan") +
#geom_line(aes(y = lin_mdl$fitted.values), color = "red") +
geom_line(aes(y = pois_pred), color = "cyan") +
geom_line(aes(y = lin_pred), color = "red")
set.seed(8)
DELIVERYVEC <- round(runif(n = 1000, min = 15, max = 180))
y <- as.numeric(min(DELIVERYVEC))
LB_DELIVERYACTUALMIN <- (ifelse((y %% 10) == 0,y, y-(y %% 10))) #lower bound
z <- as.numeric(max(DELIVERYVEC))
UB_DELIVERYACTUALMIN <- ifelse((z %% 10) == 0,z,z+(10-(z %% 10))) #upper bound
FINAL_DF <- data.frame(DELIVERYVEC)
FINAL_DF
z
DELIVERYVEC
LB_DELIVERYACTUALMIN
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10))
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)) {
ifelse(i <= -10
,eval(parse(text = paste0('FINAL_DF$DELIVERYVECN', -1*i,'_N',-1*(i+10), '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
,eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i,'_',i+10, '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
)
}
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)) {
ifelse(i <= -10
,eval(parse(text = paste0('FINAL_DF$DELIVERYVECN', -1*i,'_N',-1*(i+10), '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
,eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i,'_',i+10, '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
)
}
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)) {
ifelse(i <= -10
,eval(parse(text = paste0('FINAL_DF$DELIVERYVECN', -1*i,'_N',-1*(i+10), '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
,eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i,'_',i+10, '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
)
}
FINAL_DF$DELIVERYVEC100_110
FINAL_DF$DELIVERYVEC10_20
FINAL_DF %>% View
library(dplyr)
FINAL_DF %>% View
FINAL_DF$DELIVERYVEC10_20
FINAL_DF <- data.frame(DELIVERYVEC)
FINAL_DF %>% View
FINAL_DF
?cut
to_cut <- seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)
to_cut
FINAL_DF %>% cut(to_cut)
FINAL_DF %>% as.numeric() %>%
cut(to_cut)
FINAL_DF <- data.frame(DELIVERYVEC)
FINAL_DF %>% as.numeric() %>%
cut(to_cut)
class(FINAL_DF)
class(FINAL_DF[1])
class(FINAL_DF[[1]])
FINAL_DF[[1]] %>%
cut(to_cut)
FINAL_DF[[1]] %>%
cut(to_cut) %>%
spread()
library(tidyverse)
FINAL_DF[[1]] %>%
cut(to_cut) %>%
spread()
cut_df <- FINAL_DF[[1]] %>%
cut(to_cut)
cut_df
cut_df %>% View
class(cut_df)
class(cut_df[1])
cut_df[1]
cut_df[[1]]
class(cut_df)
cut_df %>% as.data.frame() %>% spread()
cut_df %>% as.data.frame() %>% View
cut_df %>% as.data.frame() %>% spread(.)
cut_df %>% as.data.frame() %>% mutate(place_holder = 1) %>% spread()
cut_df %>% as.data.frame() %>%
mutate(place_holder = 1) %>% View
cut_df <- FINAL_DF[[1]] %>%
cut(to_cut) %>%
mutate(to_keep = .)
colnames(cut_df) <- range
cut_df <- FINAL_DF[[1]] %>%
cut(to_cut)
cut_df <- cut_df %>% as.data.frame()
colnames(cut_df) <- 'range'
cut_df
cut_df %>% View
cut_df %>% mutate(place_holder = 1) %>% spread()
cut_df %>% mutate(place_holder = 1) %>% spread(range)
cut_df %>% mutate(place_holder = 1) %>% spread(range, place_holder)
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)) {
eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i , '_', i+10 <-  )))
ifelse(i <= -10
,eval(parse(text = paste0('FINAL_DF$DELIVERYVECN', -1*i,'_N',-1*(i+10), '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
,eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i,'_',i+10, '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
)
}
FINAL_DF %>% View
FINAL_DF <- data.frame(DELIVERYVEC)
FINAL_DF
for (i in seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)) {
ifelse(i <= -10
,eval(parse(text = paste0('FINAL_DF$DELIVERYVECN', -1*i,'_N',-1*(i+10), '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
,eval(parse(text = paste0('FINAL_DF$DELIVERYVEC', i,'_',i+10, '<- (ifelse(DELIVERYVEC >',i,' & DELIVERYVEC <= ',i+10,',',1,',',0,'))')))
)
}
FINAL_DF %>% View
cut_df %>% mutate(place_holder = 1) %>% spread(place_holder)
cut_df %>% mutate(place_holder = 1) %>%
mutate(index = seq(1,nrow(cut_df)))
cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>% View
cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder)
cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder) %>%
mutate(is.na() = 0)
cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder) %>%
mutate(is.na() == 0)
cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder) %>%
mutate(is.na(.) == 0)
cut_df[is.na(cut_df)] <- 0
cut_df
cut_df <- cut_df %>% as.data.frame()
colnames(cut_df) <- 'range'
cut_df <- cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder)
cut_df[is.na(cut_df)] <- 0
cut_df %>% View
FINAL_DF %>% View
cut_df %>% View
cut_df$real_vals <- FINAL_DF[[1]]
colnames(cut_df) <- 'range'
cut_df <- cut_df %>%
#mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder)
to_cut <- seq(LB_DELIVERYACTUALMIN, UB_DELIVERYACTUALMIN, 10)
cut_df <- FINAL_DF[[1]] %>%
cut(to_cut) %>% as.data.frame()
cut_df$real_vals <- FINAL_DF[[1]]
cut_df %>% View
colnames(cut_df) <- c('range', 'real_vals')
cut_df %>% View
cut_df <- cut_df %>%
#mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder)
cut_df <- cut_df %>%
mutate(index = seq(1,nrow(cut_df))) %>%
mutate(place_holder = 1) %>%
spread(range, place_holder)
cut_df[is.na(cut_df)] <- 0
cut_df %>% View
library(tidyverse)
library(caret)
setwd('/Users/oskipper/Documents/Data Science/DSAccelerator/ThirdPhase/Coursera/MachineLearningFinal/')
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training %>% View
raw_train <- training %>%
#  select(classe, accel_belt_x, accel_belt_y, accel_belt_z) %>%
arrange(accel_belt_y) %>%
head(1000)
raw_train[raw_train==""] <- NA
all_cols <- colnames(raw_train)
cols_na_count <- raw_train %>%
summarise_all(funs(sum(is.na(.))))
cols_no_na <- all_cols[cols_na_count == 0]
train_1 <- raw_train %>%
select(cols_no_na) %>%
# Get rid of index column
select(-X, -raw_timestamp_part_1)
train_1 <- raw_train %>%
select(cols_no_na) %>%
# Get rid of index column
select(-X, -raw_timestamp_part_1)
train_1 %>% View
tmp_model <- train(classe ~ .,method = "rf", data=train_1) # build model
cor_matrix <- cor(train_1)
train_1 <- as.numeric(train_1)
type(train_1)
class(train_1)
lapply(train_1, class)
varImp(tmp_model)
train_1 <- raw_train %>%
select(cols_no_na) %>%
# Get rid of index column
select(-X, -raw_timestamp_part_1, -user_name, -raw_timestamp_part_2, -cvtd_timestamp)
train_1 %>% View
varImp(tmp_model)
tmp_model <- train(classe ~ .,method = "rf", data=train_1) # build model
varImp(tmp_model)
cor_matrix <- cor(train_1)
lapply(train_1, class)
training %>%
group_by(new_window) %>%
count()
train_1 <- raw_train %>%
select(cols_no_na) %>%
# Get rid of index column
select(-X, -raw_timestamp_part_1, -user_name, -raw_timestamp_part_2, -cvtd_timestamp, -new_window)
train_corr <- train_1 %>%
cor_matrix <- cor(train_1)
train_corr <- train_1 %>%
select(-clasee)
train_corr <- train_1 %>%
select(-classe)
cor_matrix <- cor(train_corr)
pca1 <- prcomp(train_1)
cor_matrix
cor_matrix %>% View
train_corr <- train_1 %>%
select(-classe, -num_window)
cor_matrix <- cor(train_corr)
cor_matrix %>% View
varImp(tmp_model)
vars <- varImp(tmp_model)
vars
class(vars)
vars %>% View
vars[1:20]
vars[1][2]
vars[[1]][2]
vars[1][[2]]
vars[1][1]
important_vars <- varImp(tmp_model)[1][1]
important_vars
important_vars <- varImp(tmp_model)[1][1] %>% arrange(Overall)
important_vars <- data.frame(varImp(tmp_model)[1][1])
important_vars <- data.frame(varImp(tmp_model)[1][1]) %>% arrange(desc(Overall))
important_vars
important_vars <- data.frame(varImp(tmp_model)[1][1])
important_vars
important_vars %>% View
important_vars <- varImp(tmp_model)[1][1]
important_vars %>% View
class(important_vars)
important_vars[1]
important_vars[2]
important_vars[1]
class(important_vars[1])
class(important_vars[[1]])
(important_vars[[1]])
important_vars[[1]] %>% View
important_vars <- data.frame(varImp(tmp_model)[1][1])
important_vars
important_vars <- add_rownames(important_vars, 'var_name')
important_vars <- rownames_to_column(important_vars, 'var_name')
important_vars <- data.frame(varImp(tmp_model)[1][1])
important_vars <- rownames_to_column(important_vars, 'var_name')
important_vars
important_vars <- important_vars %>% arrange(desc(Overall))
important_vars
important_vars <- important_vars %>%
arrange(desc(Overall)) %>%
head(10)
important_vars
total_num_vars <- 10
important_vars <- important_vars %>%
arrange(desc(Overall)) %>%
head(total_num_vars)
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
train_control
class(train_control)
important_vars
class(important_vars)
class(important_vars$var_name)
train_imp_vars <- train_1 %>%
select(important_vars)
cols_no_na
clsas(cols_no_na)
class(cols_no_na)
train_imp_vars <- train_1 %>%
select(important_vars)
cols_no_na
clsas(cols_no_na)
class(important_vars)
important_vars <- important_vars %>%
arrange(desc(Overall)) %>%
head(total_num_vars) %>%
select(var_name) %>%
as.character()
train_imp_vars <- train_1 %>%
select(important_vars)
important_vars <- important_vars %>%
arrange(desc(Overall)) %>%
head(total_num_vars)
important_vars <- data.frame(varImp(tmp_model)[1][1])
important_vars <- rownames_to_column(important_vars, 'var_name')
important_vars <- important_vars %>%
arrange(desc(Overall)) %>%
head(total_num_vars)
train_imp_vars <- train_1 %>%
select(important_vars$var_name)
train_imp_vars
train_imp_vars %>% View
train_imp_vars <- train_1 %>%
select(important_vars$var_name, classe)
train_imp_vars %>% View
test_1 <- testing
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
rf_mod <- train(classe ~ . , method = "rf", data = train_1)
rf_mod2 <- train(classe ~ ., method = "rf", data = train_1, trControl = train_control)
preds1 <- predict(rf_mod, test_1)
preds2 <- predict(rf_mod2, test_1)
preds1
preds2
trainIndex <- createDataPartition(training, p = .8)
trainIndex <- createDataPartition(training$classe, p = .8)
validation_holdout <- training[-trainIndex]
validation_holdout <- training[-trainIndex,]
training_subset <- training[trainIndex,]
trainIndex <- createDataPartition(training$classe, p = .8, list = FALSE)
validation_holdout <- training[-trainIndex,]
training_subset <- training[trainIndex,]
nrow(training)
nrow(validation_holdout)
nrow(training_subset)
preds1 <- predict(rf_mod, validation_holdout)
preds2 <- predict(rf_mod2, validation_holdout)
preds1
?confusionMatrix
tmp <- confusionMatrix(preds1, validation_holdout)
preds1
tmp <- confusionMatrix(preds1$classe, validation_holdout)
confusionMatrix(preds1, validation_holdout)
library(klaR)
data(iris)
split=0.80
trainIndex <- createDataPartition(iris$Species, p=split, list=FALSE)
data_train <- iris[ trainIndex,]
data_test <- iris[-trainIndex,]
model <- NaiveBayes(Species~., data=data_train)
install.packages("klaR")
library(klaR)
trainIndex <- createDataPartition(iris$Species, p=split, list=FALSE)
data_train <- iris[ trainIndex,]
data_test <- iris[-trainIndex,]
model <- NaiveBayes(Species~., data=data_train)
x_test <- data_test[,1:4]
y_test <- data_test[,5]
predictions <- predict(model, x_test)
predictions
preds1
class(preds1)
class(predictions$class)
preds1
predictions$class
predictions$class %>% view
predictions$class %>% View
class(predictions$class)
dim(predictions$class)
predictions$class[1]
predictions$class[2]
preds1 <- predict(rf_mod, validation_holdout)
preds2 <- predict(rf_mod2, validation_holdout)
preds1
confusionMatrix(preds1, validation_holdout)
class(preds1)
preds1
predsTest <- as.vector(preds1)
class(predsTest)
confusionMatrix(predsTest, validation_holdout)
validation_holdout
class(validation_holdout)
class(predictions$class)
predictions$class
predictions$class[1]
preds1[1]
predictions$class[2]
preds1[2]
class(preds1[2])
class(predictions$class[2])
predictions$class[2]
preds1[2]
predictions$class[[2]]
preds1[[2]]
class(preds1[[2]])
class(predictions$class[[2]])
class(preds1[[2]])
preds1 <- predict(rf_mod, validation_holdout)
preds2 <- predict(rf_mod2, validation_holdout)
preds1
preds2
confusionMatrix(predsTest, validation_holdout)
confusionMatrix(predictions$class, y_test)
class(predictions$class)
class(preds1[[2]])
confusionMatrix(predsTest, validation_holdout)
confusionMatrix(preds1, validation_holdout)
str(preds1)
str(validation_holdout)
confusionMatrix(preds1, validation_holdout$classe)
confusionMatrix(preds1, validation_holdout$classe)
confusionMatrix(preds2, validation_holdout$classe)
